---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luxuming.
--- DateTime: 2025/6/25 10:07
---


--- @class B2D.Core
local Core = {}

-- 常量定义
Core.NullIndex = -1

-- 调试相关常量
Core.B2Debug = false  -- 根据需要修改
Core.B2Validate = false

-- 身体类型计数
Core.BodyTypeCount = 3  -- 对应 BodyType.BodyTypeCount

-- 容量和溢出相关常量
Core.InitialCapacity = 16
Core.ForceOverflow = true
Core.OverflowIndex = Core.GraphColorCount - 1

-- SIMD 相关常量
-- Lua 没有 SIMD，使用默认值
Core.SimdWidth = 4  -- 假设 Vector<int>.Count = 4
Core.SimdShift = Core.SimdWidth == 8 and 3 or 2

-- The maximum number of vertices on a convex polygon. Changing this affects performance even if you
-- don't use more vertices.
Core.MaxPolygonVertices = 8

-- The default category bit for a tree proxy. Used for collision filtering.
Core.DefaultCategoryBits = 1

-- Convenience mask bits to use when you don't need collision filtering and just want
-- all results.
Core.DefaultMaskBits = 0xFFFFFFFFFFFFFFFF  -- ulong.MaxValue

-- 真实世界每米对应的模拟长度单位
Core.LengthUnitsPerMeter = 1.0

-- Used to detect bad values. Positions greater than about 16km will have precision
-- problems, so 100km as a limit should be fine in all cases.
Core.Huge = 100000.0 * Core.LengthUnitsPerMeter

-- Maximum parallel workers. Used to size some static arrays.
Core.MaxWorkers = 64

-- Maximum number of colors in the constraint graph. Constraints that cannot
-- find a color are added to the overflow set which are solved single-threaded.
Core.GraphColorCount = 12

-- A small length used as a collision and constraint tolerance. Usually it is
-- chosen to be numerically significant, but visually insignificant. In meters.
-- @warning modifying this can have a significant impact on stability
Core.LinearSlop = 0.005 * Core.LengthUnitsPerMeter

-- Maximum number of simultaneous worlds that can be allocated
Core.MaxWorlds = 128

-- The maximum rotation of a body per time step. This limit is very large and is used
-- to prevent numerical problems. You shouldn't need to adjust this.
Core.MaxRotation = 0.25 * math.pi  -- B2Math.Pi 替换为 math.pi

-- @warning modifying this can have a significant impact on performance and stability
Core.SpeculativeDistance = 4.0 * Core.LinearSlop
-- This is used to fatten AABBs in the dynamic tree. This allows proxies
-- to move by a small amount without triggering a tree adjustment.
-- This is in meters.
-- @warning modifying this can have a significant impact on performance

Core.b2_aabbMargin = 0.1 * Core.LengthUnitsPerMeter
-- The time that a body must be still before it will go to sleep. In seconds.
Core.TimeToSleep = 0.5

-- Use to validate definitions. Do not take my cookie.
Core.SecretCookie = 1152023

-- 函数定义

-- 检查定义函数
-- 在 Lua 中，我们可以使用一个通用的检查函数
--- @param def B2D.WorldDef ****def and so on
function Core.CheckDef(def)
    assert(def.InternalValue == Core.SecretCookie, "Invalid definition")
end

-- 设置每米长度单位
function Core.SetLengthUnitsPerMeter(lengthUnits)
    assert(Core.IsValid(lengthUnits) and lengthUnits > 0.0, "Length units must be valid and positive")
    Core.LengthUnitsPerMeter = lengthUnits

    -- 更新依赖于 LengthUnitsPerMeter 的常量
    Core.Huge = 100000.0 * Core.LengthUnitsPerMeter
    Core.LinearSlop = 0.005 * Core.LengthUnitsPerMeter
    Core.b2_aabbMargin = 0.1 * Core.LengthUnitsPerMeter
end

-- 获取每米长度单位
function Core.GetLengthUnitsPerMeter()
    return Core.LengthUnitsPerMeter
end

-- 获取版本号
function Core.GetVersion()
    return {major = 3, minor = 1, patch = 0}
end

-- 组合Shape的Id到一个64位整数值中
function Core.ShapePairKey(k1, k2)
    if k1 < k2 then
        -- 在 Lua 5.3+ 中使用位运算
        return (k1 << 32) | k2
    else
        return (k2 << 32) | k1
    end
end

-- IsValid 函数 (假设这是 B2Math 中的一个函数)
function Core.IsValid(x)
    return x ~= nil and x == x  -- 检查是否为 nil 和 NaN
end


return Core
