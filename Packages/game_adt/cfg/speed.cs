// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Speed : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Speed GetRootAsSpeed(ByteBuffer _bb) { return GetRootAsSpeed(_bb, new Speed()); }
  public static Speed GetRootAsSpeed(ByteBuffer _bb, Speed obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Speed __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public cfg.Attr? Value { get { int o = __p.__offset(4); return o != 0 ? (cfg.Attr?)(new cfg.Attr()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<cfg.Speed> CreateSpeed(FlatBufferBuilder builder,
      Offset<cfg.Attr> valueOffset = default(Offset<cfg.Attr>)) {
    builder.StartTable(1);
    Speed.AddValue(builder, valueOffset);
    return Speed.EndSpeed(builder);
  }

  public static void StartSpeed(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, Offset<cfg.Attr> valueOffset) { builder.AddOffset(0, valueOffset.Value, 0); }
  public static Offset<cfg.Speed> EndSpeed(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // value
    return new Offset<cfg.Speed>(o);
  }
}


static public class SpeedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Value*/, cfg.AttrVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
