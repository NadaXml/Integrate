// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct mission : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static mission GetRootAsmission(ByteBuffer _bb) { return GetRootAsmission(_bb, new mission()); }
  public static mission GetRootAsmission(ByteBuffer _bb, mission obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public mission __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int NeedTurn { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxTurn { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TurnActionValue { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FirstTrunActionValue { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<cfg.mission> Createmission(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int need_turn = 0,
      int max_turn = 0,
      int turn_action_value = 0,
      int first_trun_action_value = 0) {
    builder.StartTable(6);
    mission.AddFirstTrunActionValue(builder, first_trun_action_value);
    mission.AddTurnActionValue(builder, turn_action_value);
    mission.AddMaxTurn(builder, max_turn);
    mission.AddNeedTurn(builder, need_turn);
    mission.AddName(builder, nameOffset);
    mission.AddId(builder, id);
    return mission.Endmission(builder);
  }

  public static void Startmission(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddNeedTurn(FlatBufferBuilder builder, int needTurn) { builder.AddInt(2, needTurn, 0); }
  public static void AddMaxTurn(FlatBufferBuilder builder, int maxTurn) { builder.AddInt(3, maxTurn, 0); }
  public static void AddTurnActionValue(FlatBufferBuilder builder, int turnActionValue) { builder.AddInt(4, turnActionValue, 0); }
  public static void AddFirstTrunActionValue(FlatBufferBuilder builder, int firstTrunActionValue) { builder.AddInt(5, firstTrunActionValue, 0); }
  public static Offset<cfg.mission> Endmission(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.mission>(o);
  }
}


static public class missionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*NeedTurn*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MaxTurn*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*TurnActionValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*FirstTrunActionValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
