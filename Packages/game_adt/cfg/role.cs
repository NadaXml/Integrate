// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct role : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static role GetRootAsrole(ByteBuffer _bb) { return GetRootAsrole(_bb, new role()); }
  public static role GetRootAsrole(ByteBuffer _bb, role obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public role __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Name { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int EquipId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.Speed? Speed { get { int o = __p.__offset(10); return o != 0 ? (cfg.Speed?)(new cfg.Speed()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.Attr? Atk { get { int o = __p.__offset(12); return o != 0 ? (cfg.Attr?)(new cfg.Attr()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.Attr? Def { get { int o = __p.__offset(14); return o != 0 ? (cfg.Attr?)(new cfg.Attr()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.Attr? Hp { get { int o = __p.__offset(16); return o != 0 ? (cfg.Attr?)(new cfg.Attr()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<cfg.role> Createrole(FlatBufferBuilder builder,
      int id = 0,
      float name = 0.0f,
      int equip_id = 0,
      Offset<cfg.Speed> speedOffset = default(Offset<cfg.Speed>),
      Offset<cfg.Attr> atkOffset = default(Offset<cfg.Attr>),
      Offset<cfg.Attr> defOffset = default(Offset<cfg.Attr>),
      Offset<cfg.Attr> hpOffset = default(Offset<cfg.Attr>)) {
    builder.StartTable(7);
    role.AddHp(builder, hpOffset);
    role.AddDef(builder, defOffset);
    role.AddAtk(builder, atkOffset);
    role.AddSpeed(builder, speedOffset);
    role.AddEquipId(builder, equip_id);
    role.AddName(builder, name);
    role.AddId(builder, id);
    return role.Endrole(builder);
  }

  public static void Startrole(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, float name) { builder.AddFloat(1, name, 0.0f); }
  public static void AddEquipId(FlatBufferBuilder builder, int equipId) { builder.AddInt(2, equipId, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, Offset<cfg.Speed> speedOffset) { builder.AddOffset(3, speedOffset.Value, 0); }
  public static void AddAtk(FlatBufferBuilder builder, Offset<cfg.Attr> atkOffset) { builder.AddOffset(4, atkOffset.Value, 0); }
  public static void AddDef(FlatBufferBuilder builder, Offset<cfg.Attr> defOffset) { builder.AddOffset(5, defOffset.Value, 0); }
  public static void AddHp(FlatBufferBuilder builder, Offset<cfg.Attr> hpOffset) { builder.AddOffset(6, hpOffset.Value, 0); }
  public static Offset<cfg.role> Endrole(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 10);  // speed
    builder.Required(o, 12);  // atk
    builder.Required(o, 14);  // def
    builder.Required(o, 16);  // hp
    return new Offset<cfg.role>(o);
  }
}


static public class roleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Name*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*EquipId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 10 /*Speed*/, cfg.SpeedVerify.Verify, true)
      && verifier.VerifyTable(tablePos, 12 /*Atk*/, cfg.AttrVerify.Verify, true)
      && verifier.VerifyTable(tablePos, 14 /*Def*/, cfg.AttrVerify.Verify, true)
      && verifier.VerifyTable(tablePos, 16 /*Hp*/, cfg.AttrVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
